// Generated by CoffeeScript 1.4.0
var Set,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty;

Set = (function() {

  function Set() {
    this.findRandomElement = __bind(this.findRandomElement, this);

    this.all = __bind(this.all, this);

    this.any = __bind(this.any, this);

    this.first = __bind(this.first, this);

    this.remove = __bind(this.remove, this);

    this.add = __bind(this.add, this);

    this.contains = __bind(this.contains, this);

  }

  Set.prototype.elements = {};

  Set.prototype.contains = function(e) {
    return this.elements.hasOwnProperty(e);
  };

  Set.prototype.add = function(e) {
    return this.elements[e] = e;
  };

  Set.prototype.remove = function(e) {
    return delete this.elements[elem];
  };

  Set.prototype.first = function() {
    var e;
    for (e in this.elements) {
      return this.elements[e];
    }
  };

  Set.prototype.any = function(f) {
    var item, _ref;
    _ref = this.elements;
    for (item in _ref) {
      if (!__hasProp.call(_ref, item)) continue;
      if (f(item)) {
        return true;
      }
    }
    return false;
  };

  Set.prototype.all = function(f) {
    var item, _ref;
    _ref = this.elements;
    for (item in _ref) {
      if (!__hasProp.call(_ref, item)) continue;
      if (!f(item)) {
        return false;
      }
    }
    return true;
  };

  Set.prototype.findRandomElement = function() {
    var idx, item, keys, _ref;
    keys = Object.keys(this.elements);
    idx = Math.floor(Math.random() * keys.length);
    _ref = this.elements;
    for (item in _ref) {
      if (!__hasProp.call(_ref, item)) continue;
      if (i === idx) {
        return item;
      }
      i += 1;
    }
  };

  return Set;

})();

// Generated by CoffeeScript 1.4.0
var Set,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty;

Set = (function() {

  function Set() {
    var elems, i, initial, _i, _len, _ref;
    elems = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.elements = {};
    this.added = {};
    this.order = [];
    initial = elems.length === 1 && typeof ((_ref = elems[0]) != null ? _ref.length : void 0) === 'number' ? elems[0] : elems;
    for (_i = 0, _len = initial.length; _i < _len; _i++) {
      i = initial[_i];
      this.add(i);
    }
  }

  Set.prototype.contains = function(e) {
    return this.elements.hasOwnProperty(e);
  };

  Set.prototype.add = function(e) {
    var i;
    if (this.contains(e)) {
      return;
    }
    this.elements[e] = e;
    i = this.order.length;
    this.order[i] = e;
    this.added[e] = i;
    if (this.order.length !== Object.keys(this.elements).length) {
      return alert(this.order.length + ' ~ ' + Object.keys(this.elements).length);
    }
  };

  Set.prototype.remove = function(e) {
    var i, index, _i, _ref, _results;
    delete this.elements[e];
    index = this.added[e];
    this.order.splice(index, 1);
    delete this.added[e];
    if (index < this.order.length) {
      _results = [];
      for (i = _i = index, _ref = this.order.length - 1; index <= _ref ? _i <= _ref : _i >= _ref; i = index <= _ref ? ++_i : --_i) {
        _results.push(this.added[this.order[i]] = this.added[this.order[i]] - 1);
      }
      return _results;
    }
  };

  Set.prototype.first = function() {
    return this.order[0];
  };

  Set.prototype.last = function() {
    return this.order[this.order.length - 1];
  };

  Set.prototype.findFirst = function(f) {
    var i, _i, _ref;
    for (i = _i = 0, _ref = this.order.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (f(this.order[i])) {
        return this.order[i];
      }
    }
    return null;
  };

  Set.prototype.findLast = function(f) {
    var i, _i, _ref;
    for (i = _i = _ref = this.order.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
      if (f(this.order[i])) {
        return this.order[i];
      }
    }
    return null;
  };

  Set.prototype.length = function() {
    return Object.keys(this.elements).length;
  };

  Set.prototype.each = function(f) {
    var item, _ref, _results;
    _ref = this.elements;
    _results = [];
    for (item in _ref) {
      if (!__hasProp.call(_ref, item)) continue;
      _results.push(f(this.elements[item]));
    }
    return _results;
  };

  Set.prototype.toArray = function() {
    var a;
    a = [];
    this.each(function(e) {
      return a.push(e);
    });
    return a;
  };

  Set.prototype.any = function(f) {
    var item, _ref;
    _ref = this.elements;
    for (item in _ref) {
      if (!__hasProp.call(_ref, item)) continue;
      if (f(this.elements[item])) {
        return true;
      }
    }
    return false;
  };

  Set.prototype.all = function(f) {
    var item, _ref;
    _ref = this.elements;
    for (item in _ref) {
      if (!__hasProp.call(_ref, item)) continue;
      if (!f(this.elements[item])) {
        return false;
      }
    }
    return true;
  };

  Set.prototype.filter = function(f) {
    var e, item, r, _ref;
    r = new Set();
    _ref = this.elements;
    for (item in _ref) {
      if (!__hasProp.call(_ref, item)) continue;
      e = this.elements[item];
      if (f(e)) {
        r.add(e);
      }
    }
    return r;
  };

  Set.prototype.map = function(f) {
    var item, r, _ref;
    r = new Set();
    _ref = this.elements;
    for (item in _ref) {
      if (!__hasProp.call(_ref, item)) continue;
      r.add(f(this.elements[item]));
    }
    return r;
  };

  Set.prototype.randomElement = function() {
    var idx;
    idx = Math.floor(Math.random() * Object.keys(this.elements).length);
    return this.order[idx];
  };

  Set.prototype.toString = function() {
    var i, s, _i, _len, _ref;
    s = 'Set(';
    _ref = this.order;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      s += s === 'Set(' ? '' : ', ';
      s += this.order[i];
    }
    return s + ')';
  };

  return Set;

})();

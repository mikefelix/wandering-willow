// Generated by CoffeeScript 1.4.0
var BranchFunctions, DirectionFunctions,
  _this = this;

DirectionFunctions = {
  random: function() {
    var _this = this;
    return function(point, grid) {
      return _this.getRandomDir();
    };
  },
  favorDirection: function(dir, weight) {
    var _this = this;
    return function(point, grid) {
      if (_this.weightCheck(weight)) {
        return dir;
      } else {
        return _this.getRandomDir();
      }
    };
  },
  trendToCenter: function(weight) {
    var _this = this;
    return function(point, grid) {
      if (_this.weightCheck(weight)) {
        return point.directionTo(grid.center);
      } else {
        return _this.getRandomDir();
      }
    };
  },
  x: function(width, weight) {
    var _this = this;
    return function(point, grid) {
      if (point === grid.center) {
        return _this.getRandomDir();
      }
      if (_this.weightCheck(weight) && (Math.abs(point.x - point.y) <= width || grid.width - (point.x + point.y) <= width)) {
        return (point.directionTo(grid.center) + 4) % 8;
      } else {
        return _this.getRandomDir();
      }
    };
  },
  explode: function() {
    var _this = this;
    return function(point, grid) {
      var d, toCenter;
      if (point === grid.center) {
        return _this.getRandomDir();
      }
      toCenter = point.directionTo(grid.center);
      while (!(d != null) || d === toCenter) {
        d = _this.getRandomDir();
      }
      return d;
    };
  },
  jagged: function() {
    var _this = this;
    return function(point, grid) {
      var d;
      while (!(d != null) || d % 2 === 0) {
        d = _this.getRandomDir();
      }
      return d;
    };
  },
  squarish: function() {
    var _this = this;
    return function(point, grid) {
      var d;
      while (!(d != null) || d % 2 === 1) {
        d = _this.getRandomDir();
      }
      return d;
    };
  },
  bounce: function(startDir, weight) {
    var _this = this;
    return function(point, grid) {
      return _this.getRandomDir();
    };
  },
  getRandomDir: function() {
    return Math.floor(Math.random() * 8);
  },
  weightCheck: function(weight) {
    return Math.random() < weight;
  }
};

BranchFunctions = {
  random: function() {
    return function(grid) {
      return grid.drawn.randomElement();
    };
  },
  fromStart: function() {
    return function(grid) {
      return grid.drawn.first();
    };
  }
};
